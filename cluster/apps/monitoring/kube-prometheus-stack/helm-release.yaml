---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 19.0.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    fullnameOverride: prometheus
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_DISCORD_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: "discord"
            slack_configs:
              - channel: "#${SECRET_ALERT_MANAGER_DISCORD_CHANNEL}"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "${SECRET_ALERT_MANAGER_DISCORD_USERNAME}"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}

                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "discord"
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert-manager.${SECRET_DOMAIN}"
            secretName: "alert-manager-${SECRET_DOMAIN/./-}-tls"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "rook-fast-rust-block"
              resources:
                requests:
                  storage: 1Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    # kube-state-metrics:
    #   fullnameOverride: kube-state-metrics
    # prometheus-node-exporter:
    #   fullnameOverride: node-exporter
    grafana:
      # enabled: true
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
      # ingress:
      #   enabled: true
      #   pathType: Prefix
      #   ingressClassName: "traefik"
      #   annotations:
      #     traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
      #   hosts:
      #     - "grafana.${SECRET_DOMAIN}"
      #   tls:
      #     - hosts:
      #         - "grafana.${SECRET_DOMAIN}"
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.2.1.1
        - 10.2.1.2
        - 10.2.1.3
      serviceMonitor:
        https: true
        insecureSkipVerify: true
      service:
        enabled: true
        port: 10257
        targetPort: 10257
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.2.1.1
        - 10.2.1.2
        - 10.2.1.3
    kubeProxy:
      enabled: true
      endpoints:
        - 10.2.1.1
        - 10.2.1.2
        - 10.2.1.3
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.1.1.1
        - 10.1.1.2
        - 10.1.1.3
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    # Setting this option to 0 disabled CPU limits
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
            secretName: "prometheus-${SECRET_DOMAIN/./-}-tls"
      # thanosService:
      #   enabled: true
      # thanosServiceMonitor:
      #   enabled: true
      prometheusSpec:
        replicas: 2
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "rook-fast-rust-block"
              resources:
                requests:
                  storage: 10Gi
        # thanos:
        #   image: quay.io/thanos/thanos:v0.23.0
        #   version: v0.22.0
        #   objectStorageConfig:
        #     name: thanos-objstore
        #     key: objstore.yml
        podDisruptionBudget:
          enabled: true
          minAvailable: 1
        additionalScrapeConfigs:
          - job_name: "coredns"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "10.2.0.1:9153"
          - job_name: "node-exporter"
            honor_timestamps: true
            static_configs:
              - targets:
                  - "10.2.0.1:9100"
          - job_name: "weather"
            static_configs:
              - targets:
                  - "wttr.in"
            metrics_path: "/${SECRET_PROMETHEUS_NODE_EXPORTER_WEATHER_LOCATION}"
            params:
              format: ["p1"]
